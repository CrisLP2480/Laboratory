struct Node* deleteNode(struct Node* root, int val) {
    if (root == NULL) {
        return root;
    }

    // the value to be deleted is in the left subtree
    if (val < root->data) {
        root->left = deleteNode(root->left, val);
    }
    // the value to be deleted is in the right subtree
    else if (val > root->data) {
        root->right = deleteNode(root->right, val);
    }
    // the value is equal to this node's value
    else {
        // has only one child or no child
        if (root->left == NULL) {
            struct Node* temp = root->right;
            free(root);
            return temp;
        } else if (root->right == NULL) {
            struct Node* temp = root->left;
            free(root);
            return temp;
        }

        // has two children, get the inorder successor (smallest in the right subtree)
        struct Node* temp = findMinValueNode(root->right);

        // copy the inorder successor's value to this node
        root->data = temp->data;

        // delete the inorder successor
        root->right = deleteNode(root->right, temp->data);
    }

    return root;
}
